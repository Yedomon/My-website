<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>An autodidact diary</title>
    <link>https://yedomon.netlify.app</link>
    <atom:link href="https://yedomon.netlify.app/index.xml" rel="self" type="application/rss+xml"/>
    <description>Yedomon Ange Bovys Zoclanclounon
</description>
    <generator>Distill</generator>
    <lastBuildDate>sam., 30 janv. 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Genome assembly of Oryza sativa using PacBio Hifi dataset</title>
      <dc:creator>Yedomon Ange Bovys Zoclanclounon</dc:creator>
      <link>https://yedomon.netlify.app/posts/2021-01-31-genome-assembly-of-oryza-sativa-using-pacbio-hifi-dataset</link>
      <description>


&lt;p style="text-align:justify;"&gt;
With the rise of long-reads sequencing technologies, it is now possible to get tens of Kb fragments reads. Recently, the advent of high fidelity Pacbio long-reads drastically improve the accuracy of SMRT Sequencing platforms. In this post, I will test the genome assembly of rice genome using &lt;a href="https://github.com/chhylp123/hifiasm"&gt;Hifiasm&lt;/a&gt; assembler.
&lt;/p&gt;
&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;
&lt;p&gt;For the installation, I proceed like recommended by the developer.&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;
$ sudo git clone https://github.com/chhylp123/hifiasm

$ cd hifiasm &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: Make sure you have installed g++ and zlib dependencies.&lt;/p&gt;
&lt;p&gt;I am using a Centos 7 distribution. So I installed zlib and g++ following the code:&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;
$ sudo yum install gcc-c++


$ sudo yum install zlib-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="data-retrieving"&gt;Data retrieving&lt;/h3&gt;
&lt;p style="text-align:justify;"&gt;
For this assembly execution, I will use the rice O. sativa MH63 Hifi data available &lt;a href="ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR996/001/SRR9969481/SRR9969481_subreads.fastq.gz"&gt;here&lt;/a&gt;. I grabbed the data set from European Nucleotide Archive &lt;a href="https://www.ebi.ac.uk/ena/browser/home"&gt;(ENA)&lt;/a&gt; using the following accession number &lt;strong&gt;SRR9969481&lt;/strong&gt;
&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;

# Download the data


$ wgetftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR996/001/SRR9969481/SRR9969481_subreads.fastq.gz


# Rename the data

$ mv SRR9969481_subreads.fastq.gz Rice.fastq.gz


# Create a link in my working directory


$ ln -fs ~/datafiles/002_o.sat.MH63_PacBio.HiFi.14kb/Rice.fastq.gz .

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="running"&gt;Running&lt;/h3&gt;
&lt;p&gt;Using vim text editor I wrote a small bash script named run_hifiasm.sh:&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;

#!/bin/bash

set -e


~/program/hifiasm/hifiasm -o Rice.asm -t 32 Rice.fastq.gz # assemble the genome



awk &amp;#39;/^S/{print &amp;quot;&amp;gt;&amp;quot;$2;print $3}&amp;#39; Rice.asm.p_ctg.gfa &amp;gt; Rice.asm.p_ctg.fa # get primary contigs in FASTA


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I ran the bash using the following code:&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;
$ /usr/bin/time -o out.ram.time.txt -v bash run_hifiasm.sh 2&amp;gt; log.hifiasm &amp;amp; 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I type &lt;strong&gt;exit&lt;/strong&gt; to put in background the running process.&lt;/p&gt;
&lt;h3 id="results"&gt;Results&lt;/h3&gt;
&lt;p&gt;Let’s check the assembly statistics&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;
$ assembly-stats Rice.asm.p_ctg.fa

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have got the following assembly statistics:&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;

sum = 421362451, n = 1225, ave = 343969.35, largest = 37513714
N50 = 13841853, n = 12
N60 = 13500458, n = 15
N70 = 12402620, n = 18
N80 = 10695965, n = 22
N90 = 5876907, n = 27
N100 = 8552, n = 1225
N_count = 0
Gaps = 0

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some characteristics related to the running process&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;

Command being timed: &amp;quot;bash run_hifiasm.sh&amp;quot;
        User time (seconds): 108396.17
        System time (seconds): 1079.09
        Percent of CPU this job got: 2615%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 1:09:46
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 21640460
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 7
        Minor (reclaiming a frame) page faults: 269598163
        Voluntary context switches: 11845273
        Involuntary context switches: 1155532
        Swaps: 0
        File system inputs: 20530400
        File system outputs: 13984408
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="comments"&gt;Comments&lt;/h3&gt;
&lt;p style="text-align:justify;"&gt;
Hifiasm is incredibly fast. A total of &lt;strong&gt;~18 mn&lt;/strong&gt; (system time) to assemble a &lt;strong&gt;~430 Mb&lt;/strong&gt; &lt;a href="https://science.sciencemag.org/content/296/5565/79"&gt;(&lt;strong&gt;Yu et al., 2002&lt;/strong&gt;)&lt;/a&gt; genome with &lt;strong&gt;32 cores&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;Table 1: Basics assembly statistics of R498 and MH63 assemblies&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;MH63&lt;/th&gt;
&lt;th&gt;R498&lt;/th&gt;
&lt;th&gt;R498&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Data type&lt;/td&gt;
&lt;td&gt;PacBio hifi&lt;/td&gt;
&lt;td&gt;PacBio CLR&lt;/td&gt;
&lt;td&gt;PacBio CLR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Assembler&lt;/td&gt;
&lt;td&gt;Hifiasm&lt;/td&gt;
&lt;td&gt;CANU&lt;/td&gt;
&lt;td&gt;HERA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Assembly level&lt;/td&gt;
&lt;td&gt;Contigs&lt;/td&gt;
&lt;td&gt;Chromosome&lt;/td&gt;
&lt;td&gt;Chromosome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Assembly size (bp)&lt;/td&gt;
&lt;td&gt;421,362,451&lt;/td&gt;
&lt;td&gt;390,983,850&lt;/td&gt;
&lt;td&gt;391,626,037&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Contigs number&lt;/td&gt;
&lt;td&gt;1,225&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Largest contig (bp)&lt;/td&gt;
&lt;td&gt;37,513,714&lt;/td&gt;
&lt;td&gt;44,361,539&lt;/td&gt;
&lt;td&gt;45,881,347&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;N50 (bp)&lt;/td&gt;
&lt;td&gt;13,841,853&lt;/td&gt;
&lt;td&gt;31,778,392&lt;/td&gt;
&lt;td&gt;31,347,481&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;L50&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p style="text-align:justify;"&gt;
The peak memory was also low &lt;strong&gt;21.64 MB&lt;/strong&gt;, showing that Hifiasm is less memory consuming. The Hifiasm assembly size was &lt;strong&gt;421 MB&lt;/strong&gt;, representing &lt;strong&gt;97.90%&lt;/strong&gt; of the estimated size. Besides, the contiguity is quite high (&lt;strong&gt;N50 = 13.84 Mbp&lt;/strong&gt;) compared to the recent Pacbio CLR, linkage mapping and fosmid-based assembly released by &lt;a href="https://www.nature.com/articles/ncomms15324"&gt;&lt;strong&gt;Du et al. (2017)&lt;/strong&gt;&lt;/a&gt;.A basic comparison with the chromosomal-scale assemblies from CANU &lt;a href="https://genome.cshlp.org/content/27/5/722"&gt;&lt;strong&gt;(Koren et al., 2017)&lt;/strong&gt;&lt;/a&gt; and HERA &lt;a href="https://www.nature.com/articles/s41467-019-13355-3"&gt;&lt;strong&gt;(Du and Liang, 2019)&lt;/strong&gt;&lt;/a&gt; assemblers with PacBio CLR data (Table 1) showed that the Hifiasm assembly is quite good for Hi-C scaffolding.
&lt;/p&gt;
&lt;h3 id="cited-literature"&gt;Cited literature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.nature.com/articles/ncomms15324#Tab2"&gt;Du et al. 2017 | Sequencing and de novo assembly of a near complete indica rice genome&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.nature.com/articles/s41467-019-13355-3"&gt;Du and Liang 2019 | Assembly of chromosome-scale contigs by efficiently resolving repetitive sequences with long reads&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://genome.cshlp.org/content/27/5/722"&gt;Koren et al. 2017 | Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://science.sciencemag.org/content/296/5565/79"&gt;Yu et al. 2020 | A Draft Sequence of the Rice Genome (Oryza sativa L. ssp. indica)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>d46196477b5942efaa674829814c611c</distill:md5>
      <guid>https://yedomon.netlify.app/posts/2021-01-31-genome-assembly-of-oryza-sativa-using-pacbio-hifi-dataset</guid>
      <pubDate>sam., 30 janv. 2021 00:00:00 +0000</pubDate>
      <media:content url="https://scx2.b-cdn.net/gfx/news/hires/2014/3000ricegeno.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Python: Find single-nucleotide polymorphism from aligned sequences</title>
      <dc:creator>Yedomon Ange Bovys Zoclanclounon</dc:creator>
      <link>https://yedomon.netlify.app/posts/2021-01-21-python-find-single-nucleotide-polymorphism-from-aligned-sequences</link>
      <description>This short blog deal with the detection of SNPs from two aligned sequences</description>
      <guid>https://yedomon.netlify.app/posts/2021-01-21-python-find-single-nucleotide-polymorphism-from-aligned-sequences</guid>
      <pubDate>jeu., 21 janv. 2021 00:00:00 +0000</pubDate>
      <media:content url="https://miro.medium.com/max/4200/0*8d9OlKLLOHkSRVN4.png" medium="image" type="image/png"/>
    </item>
    <item>
      <title>awk: How to remove the rest of a fasta header name after a specific character</title>
      <dc:creator>Yedomon Ange Bovys Zoclanclounon</dc:creator>
      <link>https://yedomon.netlify.app/posts/2021-01-12-awk-how-to-remove-the-rest-of-a-fasta-header-name-after-a-specific-character</link>
      <description>This short post is about how to clean a fasta header and keep only the necessary.</description>
      <guid>https://yedomon.netlify.app/posts/2021-01-12-awk-how-to-remove-the-rest-of-a-fasta-header-name-after-a-specific-character</guid>
      <pubDate>mar., 12 janv. 2021 00:00:00 +0000</pubDate>
      <media:content url="https://cdn.nextjournal.com/data/QmZwtpT9ko15h26Fn2VH2HratvDncLVRS3yUcVBiuMyJ94?filename=awk.png&amp;content-type=image/png" medium="image" type="text/plain"/>
    </item>
    <item>
      <title>seqtk: Extract a specific set of sequences from a multi-fasta file</title>
      <dc:creator>Yedomon Ange Bovys Zoclanclounon</dc:creator>
      <link>https://yedomon.netlify.app/posts/2021-01-11-seqtk-extract-a-specific-set-of-sequences-from-a-multi-fasta-file</link>
      <description>This tutorial deals with one aspect of a fasta file handling.</description>
      <guid>https://yedomon.netlify.app/posts/2021-01-11-seqtk-extract-a-specific-set-of-sequences-from-a-multi-fasta-file</guid>
      <pubDate>lun., 11 janv. 2021 00:00:00 +0000</pubDate>
      <media:content url="https://command-not-found.com/og/1200x628/cmd/seqtk.png" medium="image" type="image/png"/>
    </item>
    <item>
      <title>awk: Extract sequence from a multiple-fasta file and return each sequence with the corresponding name</title>
      <dc:creator>Yedomon Ange Bovys Zoclanclounon</dc:creator>
      <link>https://yedomon.netlify.app/posts/2021-01-10-awk-extract-sequence-from-a-multiple-fasta-file-and-return-each-sequence-with-the-corresponding-name</link>
      <description>This post is about how to extract from a multiple fasta file each sequence with the corresponding header</description>
      <guid>https://yedomon.netlify.app/posts/2021-01-10-awk-extract-sequence-from-a-multiple-fasta-file-and-return-each-sequence-with-the-corresponding-name</guid>
      <pubDate>dim., 10 janv. 2021 00:00:00 +0000</pubDate>
      <media:content url="https://cdn.nextjournal.com/data/QmZwtpT9ko15h26Fn2VH2HratvDncLVRS3yUcVBiuMyJ94?filename=awk.png&amp;content-type=image/png" medium="image" type="text/plain"/>
    </item>
    <item>
      <title>awk: Prepare input file for RNA editing detection</title>
      <dc:creator>Yedomon Ange Bovys Zoclanclounon</dc:creator>
      <link>https://yedomon.netlify.app/posts/2021-01-10-awk-prepare-input-file-for-rna-editing-detection</link>
      <description>This post deals with the formating of input file for RNA editing sites detection</description>
      <guid>https://yedomon.netlify.app/posts/2021-01-10-awk-prepare-input-file-for-rna-editing-detection</guid>
      <pubDate>dim., 10 janv. 2021 00:00:00 +0000</pubDate>
      <media:content url="https://cdn.nextjournal.com/data/QmZwtpT9ko15h26Fn2VH2HratvDncLVRS3yUcVBiuMyJ94?filename=awk.png&amp;content-type=image/png" medium="image" type="text/plain"/>
    </item>
    <item>
      <title>R: Line graph with a color gradient using ggplot2</title>
      <dc:creator>Yedomon Ange Bovys Zoclanclounon</dc:creator>
      <link>https://yedomon.netlify.app/posts/2021-01-10-r-line-graph-with-a-color-gradient-using-ggplot2</link>
      <description>This tutorial provides a way to plot a line graph with ggplot2 with ga color gradient</description>
      <guid>https://yedomon.netlify.app/posts/2021-01-10-r-line-graph-with-a-color-gradient-using-ggplot2</guid>
      <pubDate>dim., 10 janv. 2021 00:00:00 +0000</pubDate>
      <media:content url="https://github.com/Yedomon/plastomics101/blob/main/pic1.png?raw=true" medium="image" type="text/plain"/>
    </item>
  </channel>
</rss>
